# =============================================================================
# Task 1
# =============================================================================
# 1.1. Import the dataset financials.csv in Python using pandas DataFrame
import pandas as pd
financial_path = '/Users/chuchoanh/Documents/University of Liverpool 22:23/1. Programing (Python)/Assignment 2/'
financial_df = pd.read_csv(financial_path + 'financials.csv')
# Display the first 8 rows of the financial dataframe
financial_df.head(8) # This will be displayed using Jupyter Lab
# 1.2. Find Shape of the financial dataset
print(f'The shape of the financial dataset is {financial_df.shape[0]} rows and {financial_df.shape[1]} columns.')

# =============================================================================
# Task 2
# =============================================================================
# 2.1. Process missing values in the data set
# Loop over columns index 2 to 11 to convert these values into numerical data and detect missing values
for column in financial_df.columns[2:]:
    financial_df[column] = pd.to_numeric(financial_df[column], errors='coerce')
# Print the number of missing values in each column
missing_values = financial_df.isna().sum()
print('The number of missing values in each column:\n', missing_values)
# Calculate the proportion of missing values in each column
print('The proportion of missing values in each column:\n', (missing_values/financial_df.shape[0])*100)

# Find standard deviation of each feature categorized by sectors:
sector_df = financial_df.groupby('Stock_Market_Sector') # Group data set by sectors
print ('Standard deviation of each feature categorized by sectors:')
sector_df.std() # This will be displayed using Jupyter Lab

# Replace missing values with median of each feature catagorised by sector:
for column in financial_df.columns[2:]: # Loop over columns that contain missing values
    financial_df[column] = financial_df[column].fillna(sector_df[column].median()) # Replace missing values with median of each feature catagorised by sector
print('Is there any missing value in the data frame?\n', financial_df.isnull().any()) # Check if there is any missing value left in the data frame

# 2.2. Print basic statistical descriptions of numerical columns in the financial data set
print('Basic statistical descriptions of numerical columns in the financial data set:\n', financial_df.describe())

# Print basic statistical descriptions of numerical columns in the financial data set
print('Basic statistical descriptions of categorical columns in the financial data set:\n', financial_df.describe(include=["object", "bool"]))

# =============================================================================
# Task 3
# =============================================================================
# 3.1. Create the ranks of the percentage of stocks in each sector treemap using plotly.express library in Jupyter Lab
# Peter, M (2022) 'Create Your Own Wall Street HeatMap With Python' (Python 3.0) [Source code]. https://medium.com/@peterspage/create-your-own-wall-street-heatmap-with-python-27c0597df2db
df1 = round((financial_df['Market_Cap'] / financial_df.groupby('Stock_Market_Sector')['Market_Cap'].transform('sum'))*100,2) # Finding percentage of stocks in each sector by dividing financial_df['Market_Cap'] by Market_Cap sum of each sector 
df2 = financial_df[['Stock_Market_Sector','Company_Name', 'Market_Cap']] # Create new data frame including columns of 'Stock_Market_Sector','Company_Name' and 'Market_Cap'
df2 ['Market_Cap_Share'] = df1 # Append percentage of stocks in each sector to the data frame
df2 = df2.sort_values(by=['Market_Cap'], ascending=[False]) # Sort values of the data frame in descending order, this data frame is ready for ploting
import plotly.express as px # Import plotly.express library for ploting treemap
MSP = px.treemap(df2, 
                 path=[px.Constant('Stock Market'), 'Stock_Market_Sector',  'Company_Name', 'Market_Cap_Share'],
                 values='Market_Cap', color='Market_Cap',
                 color_continuous_scale=[ 'Pink', "#8b0000", 'White']) # Pass values into px.treemap for plotting, MSP is the name of the plot 
MSP.data[0].texttemplate = "%{label}%" # Add % to the lable of percentage of stocks
MSP.update_traces(textposition="middle center", 
                  selector=dict(type='treemap')) # Format lables of stocks
MSP.update_layout(margin = dict(t=50, l=10, r=10, b=10)) # Format margin of treemap
MSP.show() # Show the treemap

# 3.2. Import seaborn and matplotlib library to visualize the correlation matrix
import seaborn as sns
import matplotlib.pyplot as plt
# Find correlation matrix of columns index 2 to 11 using df.corr()
correlation_mat = financial_df.iloc[:,2:].corr()
# Visualize and render the plot with title
sns.heatmap(correlation_mat, annot = True)
plt.title('Correlation heatmap of financial features')
plt.show()

# 3.3. Define a function to dectect and print names of companies which have maximum or minimum value of a column
def max_min_comp (column):
    Company_max = financial_df.iloc[financial_df[column].idxmax(), 0] # Find row index of the company with maximum value using df.idxmax() and access company name using df.iloc with column index of 0 (Column of Company_Name)
    Company_min = financial_df.iloc[financial_df[column].idxmin(), 0] # Find row index of the company with minimum value using df.idxmin() and access company name using df.iloc with column index of 0 (Column of Company_Name)
    print(f'The company has the maximum {column} is {Company_max} with the value of {financial_df.loc[financial_df[column].idxmax(), column]}.') # Print company name with maximum value
    print(f'The company has the minimum {column} is {Company_min} with the value of {financial_df.loc[financial_df[column].idxmin(), column]}.') # Print company name with minimum value
# Loop over the list of given columns (features) and pass columns to the defined function max_min_comp (column) to display results
for column in ('Dividend Yield', 'Earnings/Share', 'Price/Sales'):
    max_min_comp (column)
    
# 3.4. Define a function to calculate the probability of dividend yield greater than 2.181 for a sector
def div_prob (sector):
    sector_df = (financial_df[(financial_df['Stock_Market_Sector'] == sector)]) # Slicing (categorising) data frame into sectors using logical expression
    i = 0
    for item in sector_df.iloc[:,4].values: # Turn the sector data frame in Dividend Yield column into array using df.values and loop over values in the array
        if item > 2.181: # Count the number of values > 2.181 using conditional statement
            i = i + 1
    div_prob = (i/len(sector_df.iloc[:,4].values)) # Compute the probability by ratio of the number of satisfied values (i) and the total number of Dividend Yields in each sector
    return div_prob
# Loop over the list of given sectors and to each sector to function div_prob (sector), print the result
for sector in ('Real Estate', 'Financials', 'Energy'):
    print (f'The probability of dividend yield greater than 2.181 for {sector} is', round(div_prob (sector),3))

# 3.5. Define a function to plot the data frame of a feature by sectors
def bar_plot(column):
    sector_df1 = financial_df.groupby('Stock_Market_Sector')[column].mean() # Group data frame by sector and feature
    sector_df1.plot.bar() # Bar plot the data frame
    plt.title(f'Average {column} for each market sector') # Insert title for the bar plot
    plt.ylabel(f'Average {column}') # Insert label for x-axis of the bar plot
    for i in range(0, sector_df1.shape[0]):
        if sector_df1[i] > 1e3:
            plt.annotate(str(round(sector_df1[i]/1e11,3)), xy = (i,sector_df1[i]), ha = 'center', va = 'bottom') # Turn values greater than 1e3 into ratio of 1e11 for better annotations
        else:
            plt.annotate(str(round(sector_df1[i],3)), xy = (i,sector_df1[i]), ha = 'center', va = 'bottom') # Insert annotations of values less than 1e3
    plt.show()
# Loop over list of given features and pass each feature to the bar_plot(column) function to plot the requested data:
for sector in ('Earnings/Share', 'Dividend Yield', 'Market_Cap'):
    bar_plot(sector)


